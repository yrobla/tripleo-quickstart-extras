# Ironic defaults to using `qemu:///system`.  When running libvirtd
# unprivileged we need to use `qemu:///session`.  This allows us to pass
# the value of libvirt_uri into /etc/ironic/ironic.conf.
ironic::drivers::ssh::libvirt_uri: '{{libvirt_uri}}'

# The default httpd ipxe port is 8080, but this conflicts with the telnet
# server which streams the console log in CI. So we allow override here.
ironic::drivers::deploy::http_port: '{{undercloud_ironic_ipxe_port}}'

# The following are configurations for the different workers for the undercloud
# services.
{% if undercloud_workers is defined %}
undercloud_workers: {{undercloud_workers}}
{% endif %}

{% if undercloud_glance_workers is defined %}
glance::api::workers: {{undercloud_glance_workers}}
glance::registry::workers: {{undercloud_glance_workers}}
{% elif undercloud_workers is defined %}
glance::api::workers: "%{hiera('undercloud_workers')}"
glance::registry::workers: "%{hiera('undercloud_workers')}"
{% endif %}

{% if undercloud_heat_workers is defined and release not in ['liberty', 'mitaka','newton', 'ocata'] %}
heat::wsgi::apache_api::workers: {{undercloud_heat_workers}}
heat::wsgi::apache_api_cfn::workers: {{undercloud_heat_workers}}
heat::engine::num_engine_workers: {{undercloud_heat_workers}}
{% elif undercloud_heat_workers is defined %}
heat::api::workers: {{undercloud_heat_workers}}
heat::api_cfn::workers: {{undercloud_heat_workers}}
heat::engine::num_engine_workers: {{undercloud_heat_workers}}
{% elif undercloud_workers is defined %}
heat::api::workers: "%{hiera('undercloud_workers')}"
heat::api_cfn::workers: "%{hiera('undercloud_workers')}"
heat::engine::num_engine_workers: "%{hiera('undercloud_workers')}"
{% endif %}

{% if undercloud_ironic_workers is defined %}
ironic::api::workers: {{undercloud_ironic_workers}}
ironic::wsgi::apache::workers: {{undercloud_ironic_workers}}
{% elif undercloud_workers is defined %}
ironic::api::workers: "%{hiera('undercloud_workers')}"
ironic::wsgi::apache::workers: "%{hiera('undercloud_workers')}"
{% endif %}

{% if undercloud_keystone_workers is defined %}
keystone::wsgi::apache::workers: {{undercloud_keystone_workers}}
{% elif undercloud_workers is defined %}
keystone::wsgi::apache::workers: "%{hiera('undercloud_workers')}"
{% endif %}

{% if undercloud_neutron_workers is defined %}
neutron::agents::metadata::metadata_workers: {{undercloud_neutron_workers}}
neutron::server::api_workers: {{undercloud_neutron_workers}}
{% elif undercloud_workers is defined %}
neutron::agents::metadata::metadata_workers: "%{hiera('undercloud_workers')}"
neutron::server::api_workers: "%{hiera('undercloud_workers')}"
{% endif %}

{% if undercloud_nova_workers is defined %}
nova::api::metadata_workers: {{undercloud_nova_workers}}
nova::api::osapi_compute_workers: {{undercloud_nova_workers}}
nova::conductor::workers: {{undercloud_nova_workers}}
{% elif undercloud_workers is defined %}
nova::api::metadata_workers: "%{hiera('undercloud_workers')}"
nova::api::osapi_compute_workers: "%{hiera('undercloud_workers')}"
nova::conductor::workers: "%{hiera('undercloud_workers')}"
{% endif %}

{% if undercloud_enable_novajoin or enable_tls_everywhere %}
nova::api::vendordata_dynamic_connect_timeout: {{ novajoin_connect_timeout }}
nova::api::vendordata_dynamic_read_timeout: {{ novajoin_read_timeout }}
{% endif %}

{% if undercloud_swift_workers is defined %}
swift::proxy::workers: {{undercloud_swift_workers}}
{% elif undercloud_workers is defined %}
swift::proxy::workers: "%{hiera('undercloud_workers')}"
{% endif %}
